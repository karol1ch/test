# Adding workflow rules to avoid other branches to use the pipeline
# since we only want to use the master branch
workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == 'master'

stages:
  - clean
  - build
  - test
  - visualize

clean:
  image: gradle:7.4.2-jdk17
  stage: clean
  script:
    - echo "Cleaning leftovers from previous builds"
    - sh $CI_PROJECT_DIR/gradlew clean

gradle-build:
  image: gradle:7.4.2-jdk17
  stage: build
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
    - gradle clean build -x test
  artifacts:
    paths:
      - build/libs/*.jar
  cache:
    key: gradle-cache
    paths:
      - .gradle/caches

test:
  stage: test
  image: gradle:7.4.2-jdk17
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
    - gradle test


test-jdk17:
  stage: test
  image: gradle:7.4.2-jdk17
  script:
    - 'gradle test jacocoTestReport' # jacoco must be configured to create an xml report
  artifacts:
    paths:
      - build/jacoco/jacoco.xml

coverage-jdk17:
  # Must be in a stage later than test-jdk11's stage.
  # The `visualize` stage does not exist by default.
  # Please define it first, or chose an existing stage like `deploy`.
  stage: visualize
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    # convert report from jacoco to cobertura, using relative project path
    - python /opt/cover2cover.py build/jacoco/jacoco.xml $CI_PROJECT_DIR/src/main/java/ > build/cobertura.xml
  needs: ["test-jdk17"]
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/cobertura.xml

static-code-analysis:
  image: gradle:7.4.2-jdk17
  stage: test
  script:
    - echo "Running Static Code Analysis..."
    - echo "Evaluate Violations..."
    - sh $CI_PROJECT_DIR/gradlew evaluateViolations
